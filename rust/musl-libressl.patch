diff -ruN rustc-1.40.0-src-orig/src/bootstrap/compile.rs rustc-1.40.0-src/src/bootstrap/compile.rs
--- rustc-1.40.0-src-orig/src/bootstrap/compile.rs	2019-12-17 00:38:05.000000000 +0900
+++ rustc-1.40.0-src/src/bootstrap/compile.rs	2019-12-20 23:13:01.024623480 +0900
@@ -130,22 +130,6 @@
         target_deps.push(target);
     };
 
-    // Copies the crt(1,i,n).o startup objects
-    //
-    // Since musl supports fully static linking, we can cross link for it even
-    // with a glibc-targeting toolchain, given we have the appropriate startup
-    // files. As those shipped with glibc won't work, copy the ones provided by
-    // musl so we have them on linux-gnu hosts.
-    if target.contains("musl") {
-        let srcdir = builder.musl_root(target).unwrap().join("lib");
-        for &obj in &["crt1.o", "crti.o", "crtn.o"] {
-            copy_and_stamp(&srcdir, obj);
-        }
-    } else if target.ends_with("-wasi") {
-        let srcdir = builder.wasi_root(target).unwrap().join("lib/wasm32-wasi");
-        copy_and_stamp(&srcdir, "crt1.o");
-    }
-
     // Copies libunwind.a compiled to be linked wit x86_64-fortanix-unknown-sgx.
     //
     // This target needs to be linked to Fortanix's port of llvm's libunwind.
diff -ruN rustc-1.40.0-src-orig/src/librustc_target/spec/linux_musl_base.rs rustc-1.40.0-src/src/librustc_target/spec/linux_musl_base.rs
--- rustc-1.40.0-src-orig/src/librustc_target/spec/linux_musl_base.rs	2019-12-17 00:38:05.000000000 +0900
+++ rustc-1.40.0-src/src/librustc_target/spec/linux_musl_base.rs	2019-12-20 23:11:49.950342451 +0900
@@ -26,7 +26,7 @@
     base.post_link_objects_crt.push("crtn.o".to_string());
 
     // These targets statically link libc by default
-    base.crt_static_default = true;
+    base.crt_static_default = false;
     // These targets allow the user to choose between static and dynamic linking.
     base.crt_static_respected = true;
 
diff -ruN rustc-1.40.0-src-orig/src/libunwind/build.rs rustc-1.40.0-src/src/libunwind/build.rs
--- rustc-1.40.0-src-orig/src/libunwind/build.rs	2019-12-17 00:38:06.000000000 +0900
+++ rustc-1.40.0-src/src/libunwind/build.rs	2019-12-20 23:11:49.950342451 +0900
@@ -10,10 +10,7 @@
         // Build the unwinding from libunwind C/C++ source code.
         llvm_libunwind::compile();
     } else if target.contains("linux") {
-        if target.contains("musl") {
-            // linking for musl is handled in lib.rs
-            llvm_libunwind::compile();
-        } else if !target.contains("android") {
+        if !target.contains("android") {
             println!("cargo:rustc-link-lib=gcc_s");
         }
     } else if target.contains("freebsd") {
diff -ruN rustc-1.40.0-src-orig/src/libunwind/lib.rs rustc-1.40.0-src/src/libunwind/lib.rs
--- rustc-1.40.0-src-orig/src/libunwind/lib.rs	2019-12-17 00:38:06.000000000 +0900
+++ rustc-1.40.0-src/src/libunwind/lib.rs	2019-12-20 23:11:49.954342354 +0900
@@ -20,11 +20,6 @@
     }
 }
 
-#[cfg(target_env = "musl")]
-#[link(name = "unwind", kind = "static", cfg(target_feature = "crt-static"))]
-#[link(name = "gcc_s", cfg(not(target_feature = "crt-static")))]
-extern {}
-
 #[cfg(target_os = "redox")]
 #[link(name = "gcc_eh", kind = "static-nobundle", cfg(target_feature = "crt-static"))]
 #[link(name = "gcc_s", cfg(not(target_feature = "crt-static")))]
diff -ruN rustc-1.40.0-src-orig/vendor/libc/src/unix/mod.rs rustc-1.40.0-src/vendor/libc/src/unix/mod.rs
--- rustc-1.40.0-src-orig/vendor/libc/src/unix/mod.rs	2019-12-17 02:26:11.000000000 +0900
+++ rustc-1.40.0-src/vendor/libc/src/unix/mod.rs	2019-12-20 23:11:49.954342354 +0900
@@ -298,13 +298,6 @@
     } else if #[cfg(feature = "std")] {
         // cargo build, don't pull in anything extra as the libstd dep
         // already pulls in all libs.
-    } else if #[cfg(target_env = "musl")] {
-        #[cfg_attr(feature = "rustc-dep-of-std",
-                   link(name = "c", kind = "static",
-                        cfg(target_feature = "crt-static")))]
-        #[cfg_attr(feature = "rustc-dep-of-std",
-                   link(name = "c", cfg(not(target_feature = "crt-static"))))]
-        extern {}
     } else if #[cfg(target_os = "emscripten")] {
         #[link(name = "c")]
         extern {}
